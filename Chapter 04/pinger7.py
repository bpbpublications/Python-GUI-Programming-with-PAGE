#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Jul 27, 2022 05:29:03 AM CDT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import pinger7_support

_bgcolor = "#d9d9d9"  # X11 color: 'gray85'
_fgcolor = "#000000"  # X11 color: 'black'
_compcolor = "gray40"  # X11 color: #666666
_ana1color = "#c3c3c3"  # Closest X11 color: 'gray76'
_ana2color = "beige"  # X11 color: #f5f5dc
_tabfg1 = "black"
_tabfg2 = "black"
_tabbg1 = "grey75"
_tabbg2 = "grey89"
_bgmode = "light"

_style_code_ran = 0


def _style_code():
    global _style_code_ran
    if _style_code_ran:
        return
    style = ttk.Style()
    if sys.platform == "win32":
        style.theme_use("winnative")
    style.configure(".", background=_bgcolor)
    style.configure(".", foreground=_fgcolor)
    style.configure(".", font="TkDefaultFont")
    style.map(".", background=[("selected", _compcolor), ("active", _ana2color)])
    if _bgmode == "dark":
        style.map(".", foreground=[("selected", "white"), ("active", "white")])
    else:
        style.map(".", foreground=[("selected", "black"), ("active", "black")])
    style.configure("Vertical.TScrollbar", background=_bgcolor, arrowcolor=_fgcolor)
    style.configure("Horizontal.TScrollbar", background=_bgcolor, arrowcolor=_fgcolor)
    _style_code_ran = 1


class pinger:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
        top is the toplevel containing window."""

        top.geometry("652x605+989+435")
        top.minsize(1, 1)
        top.maxsize(1265, 770)
        top.resizable(0, 0)
        top.title("Pinger")
        top.configure(highlightcolor="black")

        self.top = top
        self.rb1display = tk.StringVar()
        self.rb2disp = tk.StringVar()
        self.rb3disp = tk.StringVar()
        self.rb4display = tk.StringVar()
        self.ExternalIP = tk.StringVar()
        self.LastPingTime = tk.StringVar()
        self.PingsDone = tk.StringVar()
        self.SlowPings = tk.StringVar()
        self.FailedPings = tk.StringVar()
        self.PingDelay = tk.StringVar()
        self.PingDelay.set("1.0")
        self.TimesToPing = tk.StringVar()
        self.TimesToPing.set("0.0")
        self.selectbutton = tk.IntVar()
        self.selectedButton = tk.IntVar()

        self.lframePingTo = tk.LabelFrame(self.top)
        self.lframePingTo.place(x=400, y=0, height=340, width=250)
        self.lframePingTo.configure(relief="groove")
        self.lframePingTo.configure(text="""Ping To Sites:""")

        self.rbsite1 = tk.Radiobutton(self.lframePingTo)
        self.rbsite1.place(x=20, y=40, height=20, width=215, bordermode="ignore")

        self.rbsite1.configure(activebackground="#d9d9d9")
        self.rbsite1.configure(anchor="w")
        self.rbsite1.configure(command=pinger7_support.on_rbSiteClick)
        self.rbsite1.configure(justify="left")
        self.rbsite1.configure(text="""8.8.8.8""")
        self.rbsite1.configure(textvariable=self.rb1display)
        self.rb1display.set("""8.8.8.8""")
        self.rbsite1.configure(value="0")
        self.rbsite1.configure(variable=self.selectbutton)

        self.rbsite2 = tk.Radiobutton(self.lframePingTo)
        self.rbsite2.place(x=20, y=70, height=23, width=215, bordermode="ignore")

        self.rbsite2.configure(activebackground="#d9d9d9")
        self.rbsite2.configure(anchor="w")
        self.rbsite2.configure(command=pinger7_support.on_rbSiteClick)
        self.rbsite2.configure(justify="left")
        self.rbsite2.configure(text="""Google2 - 8.8.4.4""")
        self.rbsite2.configure(textvariable=self.rb2disp)
        self.rb2disp.set("""Google2 - 8.8.4.4""")
        self.rbsite2.configure(value="1")
        self.rbsite2.configure(variable=self.selectedButton)

        self.rbsite3 = tk.Radiobutton(self.lframePingTo)
        self.rbsite3.place(x=20, y=100, height=23, width=215, bordermode="ignore")
        self.rbsite3.configure(activebackground="#d9d9d9")
        self.rbsite3.configure(anchor="w")
        self.rbsite3.configure(command=pinger7_support.on_rbSiteClick)
        self.rbsite3.configure(justify="left")
        self.rbsite3.configure(text="""Zaphod - 192.168.1.12""")
        self.rbsite3.configure(textvariable=self.rb3disp)
        self.rb3disp.set("""Zaphod - 192.168.1.12 """)
        self.rbsite3.configure(value="2")
        self.rbsite3.configure(variable=self.selectbutton)

        self.rbsite4 = tk.Radiobutton(self.lframePingTo)
        self.rbsite4.place(x=20, y=130, height=23, width=215, bordermode="ignore")
        self.rbsite4.configure(activebackground="#d9d9d9")
        self.rbsite4.configure(anchor="w")
        self.rbsite4.configure(command=pinger7_support.on_rbSiteClick)
        self.rbsite4.configure(justify="left")
        self.rbsite4.configure(text="""192.168.1.243""")
        self.rbsite4.configure(textvariable=self.rb4display)
        self.rb4display.set("""192.168.1.243""")
        self.rbsite4.configure(value="3")
        self.rbsite4.configure(variable=self.selectbutton)

        self.rbsite5 = tk.Radiobutton(self.lframePingTo)
        self.rbsite5.place(x=20, y=160, height=23, width=215, bordermode="ignore")
        self.rbsite5.configure(activebackground="#d9d9d9")
        self.rbsite5.configure(anchor="w")
        self.rbsite5.configure(command=pinger7_support.on_rbSiteClick)
        self.rbsite5.configure(justify="left")
        self.rbsite5.configure(value="4")
        self.rbsite5.configure(variable=self.selectbutton)

        self.frameTxtBox = tk.Frame(self.top)
        self.frameTxtBox.place(x=4, y=341, height=255, width=645)
        self.frameTxtBox.configure(relief="groove")
        self.frameTxtBox.configure(borderwidth="2")
        self.frameTxtBox.configure(relief="groove")

        # _style_code()
        self.txtErrors = ScrolledText(self.frameTxtBox)
        self.txtErrors.place(x=5, y=3, height=248, width=636)
        self.txtErrors.configure(background="white")
        self.txtErrors.configure(font="TkTextFont")
        self.txtErrors.configure(insertborderwidth="3")
        self.txtErrors.configure(selectbackground="#c4c4c4")
        self.txtErrors.configure(wrap="none")

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.sub_menu = tk.Menu(
            top,
            activebackground="#f9f9f9",
            activeforeground="black",
            foreground="black",
            tearoff=0,
        )
        self.menubar.add_cascade(
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="File",
            menu=self.sub_menu,
        )
        self.sub_menu.add_command(
            activebackground="#d8d8d8",
            activeforeground="#000000",
            background="#d9d9d9",
            command=pinger7_support.mnuFileExit,
            font="TkMenuFont",
            foreground="#000000",
            label="Exit",
        )
        self.sub_menu1 = tk.Menu(
            top,
            activebackground="#f9f9f9",
            activeforeground="black",
            foreground="black",
            tearoff=0,
        )
        self.menubar.add_cascade(
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="Help",
            menu=self.sub_menu1,
        )
        self.sub_menu1.add_command(
            activebackground="#d8d8d8",
            activeforeground="#000000",
            background="#d9d9d9",
            command=pinger7_support.mnuHelpAbout,
            font="TkMenuFont",
            foreground="#000000",
            label="About",
        )

        self.frameDisplay = tk.Frame(self.top)
        self.frameDisplay.place(x=4, y=0, height=175, width=395)
        self.frameDisplay.configure(relief="groove")
        self.frameDisplay.configure(borderwidth="2")
        self.frameDisplay.configure(relief="groove")

        self.Label1 = tk.Label(self.frameDisplay)
        self.Label1.place(x=3, y=15, height=19, width=147)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor="e")
        self.Label1.configure(text="""External IP:""")

        self.lblExternalIP = tk.Label(self.frameDisplay)
        self.lblExternalIP.place(x=155, y=10, height=29, width=226)
        self.lblExternalIP.configure(activebackground="#f9f9f9")
        self.lblExternalIP.configure(relief="sunken")
        self.lblExternalIP.configure(textvariable=self.ExternalIP)
        self.ExternalIP.set("""""")

        self.Label3 = tk.Label(self.frameDisplay)
        self.Label3.place(x=3, y=45, height=19, width=147)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor="e")
        self.Label3.configure(text="""Last Ping Time:""")

        self.lblLastPing = tk.Label(self.frameDisplay)
        self.lblLastPing.place(x=155, y=40, height=29, width=226)
        self.lblLastPing.configure(activebackground="#f9f9f9")
        self.lblLastPing.configure(relief="sunken")
        self.lblLastPing.configure(text="""Label""")
        self.lblLastPing.configure(textvariable=self.LastPingTime)
        self.LastPingTime.set("""Label""")

        self.Label5 = tk.Label(self.frameDisplay)
        self.Label5.place(x=4, y=76, height=19, width=147)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(anchor="e")
        self.Label5.configure(text="""Pings Done:""")

        self.lblPingsDone = tk.Label(self.frameDisplay)
        self.lblPingsDone.place(x=155, y=70, height=29, width=226)
        self.lblPingsDone.configure(activebackground="#f9f9f9")
        self.lblPingsDone.configure(relief="sunken")
        self.lblPingsDone.configure(text="""Label""")
        self.lblPingsDone.configure(textvariable=self.PingsDone)
        self.PingsDone.set("""Label""")

        self.Label7 = tk.Label(self.frameDisplay)
        self.Label7.place(x=4, y=105, height=19, width=147)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(anchor="e")
        self.Label7.configure(text="""Slow Pings:""")

        self.lblSlowPings = tk.Label(self.frameDisplay)
        self.lblSlowPings.place(x=155, y=100, height=29, width=226)
        self.lblSlowPings.configure(activebackground="#f9f9f9")
        self.lblSlowPings.configure(relief="sunken")
        self.lblSlowPings.configure(text="""Label""")
        self.lblSlowPings.configure(textvariable=self.SlowPings)
        self.SlowPings.set("""Label""")

        self.Label9 = tk.Label(self.frameDisplay)
        self.Label9.place(x=4, y=135, height=19, width=147)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(anchor="e")
        self.Label9.configure(text="""Failed Pings:""")

        self.lblFailedPings = tk.Label(self.frameDisplay)
        self.lblFailedPings.place(x=155, y=130, height=29, width=226)
        self.lblFailedPings.configure(activebackground="#f9f9f9")
        self.lblFailedPings.configure(relief="sunken")
        self.lblFailedPings.configure(text="""Label""")
        self.lblFailedPings.configure(textvariable=self.FailedPings)
        self.FailedPings.set("""Label""")

        self.frameOptions = tk.Frame(self.top)
        self.frameOptions.place(x=4, y=175, height=165, width=395)
        self.frameOptions.configure(relief="groove")
        self.frameOptions.configure(borderwidth="2")
        self.frameOptions.configure(relief="groove")

        self.Label11 = tk.Label(self.frameOptions)
        self.Label11.place(x=10, y=10, height=18, width=252)
        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(anchor="e")
        self.Label11.configure(text="""Delay between Pings (in secs):""")

        self.Label12 = tk.Label(self.frameOptions)
        self.Label12.place(x=13, y=40, height=19, width=252)
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(anchor="e")
        self.Label12.configure(text="""Times to ping (0 = forever):""")

        self.spinPingDelay = tk.Spinbox(self.frameOptions, from_=1.0, to=100.0)
        self.spinPingDelay.place(x=260, y=10, height=21, width=68)
        self.spinPingDelay.configure(activebackground="#f9f9f9")
        self.spinPingDelay.configure(background="white")
        self.spinPingDelay.configure(highlightbackground="black")
        self.spinPingDelay.configure(selectbackground="#c4c4c4")
        self.spinPingDelay.configure(textvariable=self.PingDelay)

        self.spinTimesToPing = tk.Spinbox(self.frameOptions, from_=0.0, to=10000.0)
        self.spinTimesToPing.place(x=261, y=40, height=21, width=118)
        self.spinTimesToPing.configure(activebackground="#f9f9f9")
        self.spinTimesToPing.configure(background="white")
        self.spinTimesToPing.configure(highlightbackground="black")
        self.spinTimesToPing.configure(selectbackground="#c4c4c4")
        self.spinTimesToPing.configure(textvariable=self.TimesToPing)

        self.btnStart = tk.Button(self.frameOptions)
        self.btnStart.place(x=160, y=100, height=37, width=107)
        self.btnStart.configure(activebackground="#d9d9d9")
        self.btnStart.configure(command=pinger7_support.OnBtnStart)
        self.btnStart.configure(state="active")
        self.btnStart.configure(text="""Start""")


class About:
    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
        top is the toplevel containing window."""

        top.geometry("459x535+1075+509")
        top.minsize(1, 1)
        top.maxsize(1265, 770)
        top.resizable(0, 0)
        top.title("About")
        top.configure(highlightcolor="black")

        self.top = top
        self.ProgNameDisplay = tk.StringVar()
        self.VersionDisplay = tk.StringVar()
        self.AuthorDisplay = tk.StringVar()
        self.CopyrightDisplay = tk.StringVar()

        self.lblProgName = tk.Label(self.top)
        self.lblProgName.place(x=10, y=20, height=29, width=436)
        self.lblProgName.configure(activebackground="#f9f9f9")
        self.lblProgName.configure(relief="sunken")
        self.lblProgName.configure(text="""Label""")
        self.lblProgName.configure(textvariable=self.ProgNameDisplay)
        self.ProgNameDisplay.set("""Label""")

        self.lblVersion = tk.Label(self.top)
        self.lblVersion.place(x=10, y=52, height=29, width=436)
        self.lblVersion.configure(activebackground="#f9f9f9")
        self.lblVersion.configure(relief="sunken")
        self.lblVersion.configure(text="""Label""")
        self.lblVersion.configure(textvariable=self.VersionDisplay)
        self.VersionDisplay.set("""Label""")

        self.lblAuthor = tk.Label(self.top)
        self.lblAuthor.place(x=10, y=84, height=29, width=436)
        self.lblAuthor.configure(activebackground="#f9f9f9")
        self.lblAuthor.configure(relief="sunken")
        self.lblAuthor.configure(text="""Label""")
        self.lblAuthor.configure(textvariable=self.AuthorDisplay)
        self.AuthorDisplay.set("""Label""")

        self.lblCopyright = tk.Label(self.top)
        self.lblCopyright.place(x=10, y=116, height=29, width=436)
        self.lblCopyright.configure(activebackground="#f9f9f9")
        self.lblCopyright.configure(relief="sunken")
        self.lblCopyright.configure(text="""Label""")
        self.lblCopyright.configure(textvariable=self.CopyrightDisplay)
        self.CopyrightDisplay.set("""Label""")

        # _style_code()
        self.Scrolledtext1 = ScrolledText(self.top)
        self.Scrolledtext1.place(x=10, y=160, height=291, width=438)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(wrap="word")

        self.btnAboutDismiss = tk.Button(self.top)
        self.btnAboutDismiss.place(x=130, y=470, height=37, width=177)
        self.btnAboutDismiss.configure(activebackground="#d9d9d9")
        self.btnAboutDismiss.configure(command=pinger7_support.on_btnAboutDismiss)
        self.btnAboutDismiss.configure(text="""Dismiss""")


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    """Configure the scrollbars for a widget."""

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient="vertical", command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient="horizontal", command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky="nsew")
        try:
            vsb.grid(column=1, row=0, sticky="ns")
        except:
            pass
        hsb.grid(column=0, row=1, sticky="ew")
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = (
            tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() | tk.Place.__dict__.keys()
        )
        for meth in methods:
            if meth[0] != "_" and meth not in ("config", "configure"):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        """Hide and show scrollbar as needed."""

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    """Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget."""

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind("<Enter>", lambda e: _bound_to_mousewheel(e, container))
        container.bind("<Leave>", lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    """A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed."""

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == "Windows" or platform.system() == "Darwin":
        child.bind_all("<MouseWheel>", lambda e: _on_mousewheel(e, child))
        child.bind_all("<Shift-MouseWheel>", lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all("<Button-4>", lambda e: _on_mousewheel(e, child))
        child.bind_all("<Button-5>", lambda e: _on_mousewheel(e, child))
        child.bind_all("<Shift-Button-4>", lambda e: _on_shiftmouse(e, child))
        child.bind_all("<Shift-Button-5>", lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == "Windows" or platform.system() == "Darwin":
        widget.unbind_all("<MouseWheel>")
        widget.unbind_all("<Shift-MouseWheel>")
    else:
        widget.unbind_all("<Button-4>")
        widget.unbind_all("<Button-5>")
        widget.unbind_all("<Shift-Button-4>")
        widget.unbind_all("<Shift-Button-5>")


def _on_mousewheel(event, widget):
    if platform.system() == "Windows":
        widget.yview_scroll(-1 * int(event.delta / 120), "units")
    elif platform.system() == "Darwin":
        widget.yview_scroll(-1 * int(event.delta), "units")
    else:
        if event.num == 4:
            widget.yview_scroll(-1, "units")
        elif event.num == 5:
            widget.yview_scroll(1, "units")


def _on_shiftmouse(event, widget):
    if platform.system() == "Windows":
        widget.xview_scroll(-1 * int(event.delta / 120), "units")
    elif platform.system() == "Darwin":
        widget.xview_scroll(-1 * int(event.delta), "units")
    else:
        if event.num == 4:
            widget.xview_scroll(-1, "units")
        elif event.num == 5:
            widget.xview_scroll(1, "units")


def start_up():
    pinger7_support.main()


if __name__ == "__main__":
    pinger7_support.main()
