#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Dec 21, 2022 05:35:33 AM CST  platform: Linux

import sys

try:
    from ScrolledCheckedListBox import ScrolledCheckedListBox
except:
    print("This program requires the ScrolledCheckedListBox")
    sys.exit(1)

import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import messagebox

import scldemo

_debug = True  # False to eliminate debug printing from callback functions.


def main(*args):
    """Main entry point for the application."""
    global root
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = scldemo.Main(_top1)
    startup()
    root.mainloop()


def startup():
    global ListInfo, ListInfo2
    # =======================================================
    # Create the list of text items for the ScrolledCheckedListBox
    # =======================================================
    ListInfo = [
        "Appetizer",
        "Snack",
        "Barbecue",
        "Cake",
        "Candy",
        "Beverages",
        "Breads",
        "Canning & Freezing",
        "Cookies",
        "Desserts",
        "Meats",
        "Main Dish",
        "Snacks",
        "Rice",
        "Poultry",
        "Sauces",
        "Soups",
        "American",
        "Mexican",
        "Asian",
    ]
    ListInfo2 = [
        ["Appetizer", 1],
        ["Snack", 2],
        ["Barbecue", 3],
        ["Cake", 4],
        ["Candy", 5],
        ["Beverages", 6],
        ["Breads", 7],
        ["Canning & Freezing", 8],
        ["Cookies", 9],
        ["Desserts", 10],
        ["Eggs & Cheese", 11],
        ["Fish & Seafood", 12],
        ["Meats", 13],
        ["Pies", 14],
        ["Poultry", 15],
        ["Rice", 16],
        ["Pasta", 17],
        ["Cereal", 18],
        ["Salads & Dressings", 19],
        ["Sauces", 20],
    ]
    global listmode
    listmode = 1
    initialize_custom_widget()


def initialize_custom_widget():
    global listmode
    _w1.Custom1.cback = on_SCLB_click
    # To use a single list of item names comment out the next line and
    # uncomment the second line down.
    if listmode == 1:
        _w1.Custom1.load(ListInfo)
    else:
        _w1.Custom1.load(ListInfo2)
    # _w1.Custom1.load(ListInfo)
    clear_label()
    set_labels()


def on_SCLB_click(s=None):
    update_label()
    print(_w1.Custom1.get())


# ======================================================
# function set_labels()
# ------------------------------------------------------
# This calls the .set() method of the ScrolledCheckBox
# class.  That method allows items selected on initialization
# of a form.  Useful when loading a list of items for editing or
# showing already selected items from a database.
# ======================================================
def set_labels():
    _w1.Custom1.set(["Appetizer", "Candy", "Breads"])
    update_label()


# ======================================================
# function UpdateLabel()
# ------------------------------------------------------
# This function will update the message widget with the
# text of each selected item for quick visual reference.
# Usually not needed.
# ======================================================
def update_label():
    dat = _w1.Custom1.get()
    lst = []
    for x in dat:
        # print(len(x),x)
        if len(x) == 2:
            t = x[0]
            k = x[1]
            lst.append(t)
        else:
            lst.append(x)
    s = ", ".join(lst)
    _w1.Message1.configure(text=s)


# ======================================================
# function ClearLabel()
# ------------------------------------------------------
# simply clears the message widget
# ======================================================
def clear_label():
    _w1.Message1.configure(text="")


def on_btnClearChecks(*args):
    if _debug:
        print("Custom1Demo1_support.on_btnClearChecks")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.Custom1.clear()
    _w1.Message1.configure(text="")


def on_btnGetChecks(*args):
    if _debug:
        print("Custom1Demo1_support.on_btnGetChecks")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    lst = _w1.Custom1.get()
    print(lst)
    titl = "ScrolledCheckedListbox Demo"
    msg = f"Selected items: \n{lst}"
    messagebox.showinfo(titl, msg, parent=_top1, icon=messagebox.INFO)


def on_btnClearChecks(*args):
    if _debug:
        print("scldemo_support.on_btnClearChecks")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    _w1.Custom1.clear()
    _w1.Message1.configure(text="")


def on_btnExit(*args):
    if _debug:
        print("scldemo_support.on_btnExit")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    sys.exit()


def on_btnSwitchMode(*args):
    if _debug:
        print("scldemo_support.on_btnSwitchMode")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    global listmode
    if listmode == 1:
        listmode = 2
        _w1.Custom1.load(ListInfo2)
    else:
        listmode = 1
        _w1.Custom1.load(ListInfo)
    titl = "ScrolledCheckedListbox Demo"
    if listmode == 1:
        msg = "Now running in single column data mode"
    else:
        msg = "Now running in MULTI column data mode"
    messagebox.showinfo(titl, msg, parent=_top1, icon=messagebox.INFO)


# Custom = tk.Frame  # To be updated by user with name of custom widget.
Custom = ScrolledCheckedListBox  # To be updated by user with name of custom widget.

if __name__ == "__main__":
    scldemo.start_up()
