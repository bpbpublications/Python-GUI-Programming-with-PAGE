#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Jan 16, 2023 03:13:27 AM CST  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import dbview_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.map('TCheckbutton',background =
           [('selected', _bgcolor), ('active', _ana2color)], indicatorcolor =
           [('selected', _fgcolor), ('!active', _bgcolor)])
    _style_code_ran = 1

class Main:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("998x516+872+359")
        top.minsize(1, 1)
        top.maxsize(2545, 1410)
        top.resizable(0,  0)
        top.title("Database Viewer")
        top.configure(highlightcolor="black")

        self.top = top
        self.EntryRecordInfo = tk.StringVar()
        self.StatusTime = tk.StringVar()
        self.RecordNumber = tk.StringVar()
        self.combobox = tk.StringVar()
        self.EntryFirstName = tk.StringVar()
        self.EntryMiddleName = tk.StringVar()
        self.EntryLastName = tk.StringVar()
        self.EntryAddr1 = tk.StringVar()
        self.EntryAddr2 = tk.StringVar()
        self.EntryCity = tk.StringVar()
        self.EntryState = tk.StringVar()
        self.EntryPostal = tk.StringVar()
        self.EntryDOB = tk.StringVar()
        self.EntryPhone = tk.StringVar()
        self.tch47 = tk.IntVar()

        _style_code()
        self.TFrame3 = ttk.Frame(self.top)
        self.TFrame3.place(x=0, y=0, height=516, width=998)
        self.TFrame3.configure(relief='groove')
        self.TFrame3.configure(borderwidth="2")
        self.TFrame3.configure(relief="groove")
        self.TFrame2 = ttk.Frame(self.TFrame3)
        self.TFrame2.place(x=0, y=440, height=60, width=996)
        self.TFrame2.configure(relief='sunken')
        self.TFrame2.configure(borderwidth="2")
        self.TFrame2.configure(relief="sunken")
        self.TFrame1 = ttk.Frame(self.TFrame2)
        self.TFrame1.place(x=3, y=1, height=55, width=365)
        self.TFrame1.configure(relief='sunken')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="sunken")
        self.TButton1 = ttk.Button(self.TFrame1)
        self.TButton1.place(x=5, y=2, height=42, width=42)
        self.TButton1.configure(command=dbview_support.on_btnGoFirst)
        self.TButton1.configure(takefocus="")
        photo_location = os.path.join(_location,"./graphics/go-first.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.TButton1.configure(image=_img0)
        self.TButton1.configure(compound='none')
        self.TButton1.configure(style='Toolbutton')
        self.TButton1_tooltip = \
        ToolTip(self.TButton1, '''Go to First Record''')

        self.TButton2 = ttk.Button(self.TFrame1)
        self.TButton2.place(x=50, y=2, height=42, width=42)
        self.TButton2.configure(command=dbview_support.on_btnGoPrevious)
        self.TButton2.configure(takefocus="")
        photo_location = os.path.join(_location,"./graphics/go-previous.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.TButton2.configure(image=_img1)
        self.TButton2.configure(compound='none')
        self.TButton2.configure(style='Toolbutton')
        self.TButton2_tooltip = \
        ToolTip(self.TButton2, '''Go to Previous Record''')

        self.TButton3 = ttk.Button(self.TFrame1)
        self.TButton3.place(x=270, y=2, height=42, width=42)
        self.TButton3.configure(command=dbview_support.on_btnGoNext)
        self.TButton3.configure(takefocus="")
        photo_location = os.path.join(_location,"./graphics/go-next.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.TButton3.configure(image=_img2)
        self.TButton3.configure(compound='none')
        self.TButton3.configure(style='Toolbutton')
        self.TButton3_tooltip = \
        ToolTip(self.TButton3, '''Go To Next Record''')

        self.TButton4 = ttk.Button(self.TFrame1)
        self.TButton4.place(x=316, y=2, height=42, width=42)
        self.TButton4.configure(command=dbview_support.on_btnGoLast)
        self.TButton4.configure(takefocus="")
        photo_location = os.path.join(_location,"./graphics/go-last.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.TButton4.configure(image=_img3)
        self.TButton4.configure(compound='none')
        self.TButton4.configure(style='Toolbutton')
        self.TButton4_tooltip = \
        ToolTip(self.TButton4, '''Go To Last Record''')

        self.TEntry1 = ttk.Entry(self.TFrame1)
        self.TEntry1.place(x=100, y=13, height=21, width=164)
        self.TEntry1.configure(textvariable=self.EntryRecordInfo)
        self.TEntry1.configure(takefocus="False")
        self.TEntry1.configure(cursor="xterm")
        self.TLabel12 = ttk.Label(self.TFrame2)
        self.TLabel12.place(x=810, y=1, height=55, width=182)
        self.TLabel12.configure(background="#d9d9d9")
        self.TLabel12.configure(foreground="#000000")
        self.TLabel12.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel12.configure(relief="sunken")
        self.TLabel12.configure(anchor='center')
        self.TLabel12.configure(justify='left')
        self.TLabel12.configure(textvariable=self.StatusTime)
        self.StatusTime.set('''''')
        self.TLabel12.configure(compound='left')
        self.TLabel13 = ttk.Label(self.TFrame2)
        self.TLabel13.place(x=371, y=1, height=53, width=435)
        self.TLabel13.configure(background="#d9d9d9")
        self.TLabel13.configure(foreground="#000000")
        self.TLabel13.configure(font="TkDefaultFont")
        self.TLabel13.configure(relief="sunken")
        self.TLabel13.configure(anchor='w')
        self.TLabel13.configure(justify='left')
        self.TLabel13.configure(textvariable=self.RecordNumber)
        self.RecordNumber.set('''''')
        self.TLabel13.configure(compound='left')
        self.btnExit = ttk.Button(self.TFrame3)
        self.btnExit.place(x=870, y=20, height=43, width=99)
        self.btnExit.configure(command=dbview_support.on_tbtnExit)
        self.btnExit.configure(takefocus="")
        self.btnExit.configure(text='''Exit''')
        photo_location = os.path.join(_location,"./graphics/system-shutdown.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.btnExit.configure(image=_img4)
        self.btnExit.configure(compound='left')
        self.btnExit.configure(style='Toolbutton')
        self.btnExit_tooltip = \
        ToolTip(self.btnExit, '''Exit the Program''')

        self.TLabel1 = ttk.Label(self.TFrame3)
        self.TLabel1.place(x=10, y=100, height=19, width=122)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='e')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''First Name:''')
        self.TLabel1.configure(compound='left')
        self.TLabel2 = ttk.Label(self.TFrame3)
        self.TLabel2.place(x=320, y=100, height=19, width=122)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='e')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Middle Name:''')
        self.TLabel2.configure(compound='left')
        self.TLabel3 = ttk.Label(self.TFrame3)
        self.TLabel3.place(x=630, y=100, height=19, width=122)
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='e')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Last Name:''')
        self.TLabel3.configure(compound='left')
        self.TLabel4 = ttk.Label(self.TFrame3)
        self.TLabel4.place(x=10, y=150, height=19, width=122)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='e')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''Address 1:''')
        self.TLabel4.configure(compound='left')
        self.TLabel5 = ttk.Label(self.TFrame3)
        self.TLabel5.place(x=420, y=150, height=19, width=122)
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='e')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Address 2:''')
        self.TLabel5.configure(compound='left')
        self.TLabel6 = ttk.Label(self.TFrame3)
        self.TLabel6.place(x=10, y=200, height=19, width=122)
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='e')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(text='''City:''')
        self.TLabel6.configure(compound='left')
        self.TLabel7 = ttk.Label(self.TFrame3)
        self.TLabel7.place(x=380, y=200, height=19, width=82)
        self.TLabel7.configure(background="#d9d9d9")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='e')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(text='''State:''')
        self.TLabel7.configure(compound='left')
        self.TLabel8 = ttk.Label(self.TFrame3)
        self.TLabel8.place(x=680, y=200, height=19, width=112)
        self.TLabel8.configure(background="#d9d9d9")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(anchor='e')
        self.TLabel8.configure(justify='left')
        self.TLabel8.configure(text='''Postal Code:''')
        self.TLabel8.configure(compound='left')
        self.TLabel9 = ttk.Label(self.TFrame3)
        self.TLabel9.place(x=30, y=300, height=19, width=122)
        self.TLabel9.configure(background="#d9d9d9")
        self.TLabel9.configure(foreground="#000000")
        self.TLabel9.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel9.configure(relief="flat")
        self.TLabel9.configure(anchor='e')
        self.TLabel9.configure(justify='left')
        self.TLabel9.configure(text='''Date of Birth:''')
        self.TLabel9.configure(compound='left')
        self.TLabel10 = ttk.Label(self.TFrame3)
        self.TLabel10.place(x=360, y=300, height=19, width=122)
        self.TLabel10.configure(background="#d9d9d9")
        self.TLabel10.configure(foreground="#000000")
        self.TLabel10.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(anchor='e')
        self.TLabel10.configure(justify='left')
        self.TLabel10.configure(text='''Phone Number:''')
        self.TLabel10.configure(compound='left')
        self.TCombobox1 = ttk.Combobox(self.TFrame3)
        self.TCombobox1.place(x=160, y=380, height=21, width=187)
        self.TCombobox1.configure(textvariable=self.combobox)
        self.TCombobox1.configure(takefocus="")
        self.TLabel11 = ttk.Label(self.TFrame3)
        self.TLabel11.place(x=10, y=380, height=19, width=122)
        self.TLabel11.configure(background="#d9d9d9")
        self.TLabel11.configure(foreground="#000000")
        self.TLabel11.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(anchor='e')
        self.TLabel11.configure(justify='left')
        self.TLabel11.configure(text='''Department''')
        self.TLabel11.configure(compound='left')
        self.TEntFName = ttk.Entry(self.TFrame3)
        self.TEntFName.place(x=140, y=100, height=21, width=164)
        self.TEntFName.configure(textvariable=self.EntryFirstName)
        self.TEntFName.configure(takefocus="")
        self.TEntFName.configure(cursor="xterm")
        self.TEntMName = ttk.Entry(self.TFrame3)
        self.TEntMName.place(x=450, y=100, height=21, width=164)
        self.TEntMName.configure(textvariable=self.EntryMiddleName)
        self.TEntMName.configure(takefocus="")
        self.TEntMName.configure(cursor="xterm")
        self.TEntLName = ttk.Entry(self.TFrame3)
        self.TEntLName.place(x=760, y=100, height=21, width=164)
        self.TEntLName.configure(textvariable=self.EntryLastName)
        self.TEntLName.configure(takefocus="")
        self.TEntLName.configure(cursor="xterm")
        self.TEntAddr1 = ttk.Entry(self.TFrame3)
        self.TEntAddr1.place(x=150, y=150, height=21, width=254)
        self.TEntAddr1.configure(textvariable=self.EntryAddr1)
        self.TEntAddr1.configure(takefocus="")
        self.TEntAddr1.configure(cursor="xterm")
        self.TEntAddr2 = ttk.Entry(self.TFrame3)
        self.TEntAddr2.place(x=550, y=150, height=21, width=254)
        self.TEntAddr2.configure(textvariable=self.EntryAddr2)
        self.TEntAddr2.configure(takefocus="")
        self.TEntAddr2.configure(cursor="xterm")
        self.TEntCity = ttk.Entry(self.TFrame3)
        self.TEntCity.place(x=150, y=200, height=21, width=204)
        self.TEntCity.configure(textvariable=self.EntryCity)
        self.TEntCity.configure(takefocus="")
        self.TEntCity.configure(cursor="xterm")
        self.TEntState = ttk.Entry(self.TFrame3)
        self.TEntState.place(x=480, y=200, height=21, width=184)
        self.TEntState.configure(textvariable=self.EntryState)
        self.TEntState.configure(takefocus="")
        self.TEntState.configure(cursor="xterm")
        self.TEntPostal = ttk.Entry(self.TFrame3)
        self.TEntPostal.place(x=800, y=200, height=21, width=144)
        self.TEntPostal.configure(textvariable=self.EntryPostal)
        self.TEntPostal.configure(takefocus="")
        self.TEntPostal.configure(cursor="xterm")
        self.TEntDOB = ttk.Entry(self.TFrame3)
        self.TEntDOB.place(x=170, y=300, height=21, width=164)
        self.TEntDOB.configure(textvariable=self.EntryDOB)
        self.TEntDOB.configure(takefocus="")
        self.TEntDOB.configure(cursor="xterm")
        self.TEntPhone = ttk.Entry(self.TFrame3)
        self.TEntPhone.place(x=500, y=300, height=21, width=254)
        self.TEntPhone.configure(textvariable=self.EntryPhone)
        self.TEntPhone.configure(takefocus="")
        self.TEntPhone.configure(cursor="xterm")
        self.TButton5 = ttk.Button(self.TFrame3)
        self.TButton5.place(x=650, y=20, height=42, width=42)
        self.TButton5.configure(command=dbview_support.on_btnChangeTheme)
        self.TButton5.configure(takefocus="")
        photo_location = os.path.join(_location,"./graphics/view-refresh.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.TButton5.configure(image=_img5)
        self.TButton5.configure(compound='none')
        self.TButton5.configure(style='Toolbutton')
        self.TButton5_tooltip = \
        ToolTip(self.TButton5, '''Change Theme''')

        self.TButton6 = ttk.Button(self.TFrame3)
        self.TButton6.place(x=552, y=20, height=42, width=42)
        self.TButton6.configure(command=dbview_support.on_btnSearch)
        self.TButton6.configure(takefocus="")
        self.TButton6.configure(text='''Tbutton''')
        photo_location = os.path.join(_location,"./graphics/edit-find.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.TButton6.configure(image=_img6)
        self.TButton6.configure(compound='none')
        self.TButton6.configure(style='Toolbutton')
        self.TButton6_tooltip = \
        ToolTip(self.TButton6, '''Search for Last Name''')

        self.btnEdit = ttk.Button(self.TFrame3)
        self.btnEdit.place(x=238, y=20, height=42, width=42)
        self.btnEdit.configure(command=dbview_support.on_btnEdit)
        self.btnEdit.configure(takefocus="")
        self.btnEdit.configure(text='''Tbutton''')
        photo_location = os.path.join(_location,"./graphics/accessories-text-editor.png")
        global _img7
        _img7 = tk.PhotoImage(file=photo_location)
        self.btnEdit.configure(image=_img7)
        self.btnEdit.configure(compound='none')
        self.btnEdit.configure(style='Toolbutton')
        self.btnEdit_tooltip = \
        ToolTip(self.btnEdit, '''Edit Current Record''')

        self.TButton8 = ttk.Button(self.TFrame3)
        self.TButton8.place(x=350, y=20, height=42, width=42)
        self.TButton8.configure(command=dbview_support.on_btnAdd)
        self.TButton8.configure(takefocus="")
        self.TButton8.configure(text='''Tbutton''')
        photo_location = os.path.join(_location,"./graphics/list-add.png")
        global _img8
        _img8 = tk.PhotoImage(file=photo_location)
        self.TButton8.configure(image=_img8)
        self.TButton8.configure(compound='none')
        self.TButton8.configure(style='Toolbutton')
        self.TButton8_tooltip = \
        ToolTip(self.TButton8, '''Add New Employee''')

        self.TButton9 = ttk.Button(self.TFrame3)
        self.TButton9.place(x=409, y=20, height=42, width=42)
        self.TButton9.configure(command=dbview_support.on_btnDelete)
        self.TButton9.configure(takefocus="")
        self.TButton9.configure(text='''Tbutton''')
        photo_location = os.path.join(_location,"./graphics/list-remove.png")
        global _img9
        _img9 = tk.PhotoImage(file=photo_location)
        self.TButton9.configure(image=_img9)
        self.TButton9.configure(compound='none')
        self.TButton9.configure(style='Toolbutton')
        self.TButton9_tooltip = \
        ToolTip(self.TButton9, '''Delete Employee''')

        self.TButton10 = ttk.Button(self.TFrame3)
        self.TButton10.place(x=737, y=20, height=42, width=42)
        self.TButton10.configure(command=dbview_support.on_btnAbout)
        self.TButton10.configure(takefocus="")
        self.TButton10.configure(text='''Tbutton''')
        photo_location = os.path.join(_location,"./graphics/information.png")
        global _img10
        _img10 = tk.PhotoImage(file=photo_location)
        self.TButton10.configure(image=_img10)
        self.TButton10.configure(compound='none')
        self.TButton10.configure(style='Toolbutton')
        self.TButton10_tooltip = \
        ToolTip(self.TButton10, '''About''')

        self.TButton11 = ttk.Button(self.TFrame3)
        self.TButton11.place(x=790, y=20, height=42, width=42)
        self.TButton11.configure(command=dbview_support.on_btnHelp)
        self.TButton11.configure(takefocus="")
        self.TButton11.configure(text='''Tbutton''')
        photo_location = os.path.join(_location,"./graphics/question.png")
        global _img11
        _img11 = tk.PhotoImage(file=photo_location)
        self.TButton11.configure(image=_img11)
        self.TButton11.configure(compound='none')
        self.TButton11.configure(style='Toolbutton')
        self.TButton11_tooltip = \
        ToolTip(self.TButton11, '''Help''')

        self.Label1 = tk.Label(self.TFrame3)
        self.Label1.place(x=9, y=72, height=3, width=979)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(compound='left')
        self.Label1.configure(relief="raised")
        self.Label1_1 = tk.Label(self.TFrame3)
        self.Label1_1.place(x=9, y=253, height=3, width=979)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(anchor='w')
        self.Label1_1.configure(compound='left')
        self.Label1_1.configure(relief="raised")
        self.btnSave = ttk.Button(self.TFrame3)
        self.btnSave.place(x=297, y=20, height=42, width=42)
        self.btnSave.configure(command=dbview_support.on_btnSave)
        self.btnSave.configure(takefocus="")
        self.btnSave.configure(text='''Tbutton''')
        photo_location = os.path.join(_location,"./graphics/document-save.png")
        global _img12
        _img12 = tk.PhotoImage(file=photo_location)
        self.btnSave.configure(image=_img12)
        self.btnSave.configure(compound='none')
        self.btnSave.configure(state='disabled')
        self.btnSave.configure(style='Toolbutton')
        self.btnSave_tooltip = \
        ToolTip(self.btnSave, '''Save Changes''')

        self.TCheckbutton1 = ttk.Checkbutton(self.TFrame3)
        self.TCheckbutton1.place(x=20, y=30, width=144, height=21)
        self.TCheckbutton1.configure(variable=self.tch47)
        self.TCheckbutton1.configure(command=dbview_support.on_TCheck)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''Show All Records''')
        self.TCheckbutton1.configure(compound='left')
        self.btnRestore = ttk.Button(self.TFrame3)
        self.btnRestore.place(x=473, y=20, height=42, width=42)
        self.btnRestore.configure(command=dbview_support.on_btnUndoDelete)
        self.btnRestore.configure(takefocus="")
        self.btnRestore.configure(text='''Tbutton''')
        photo_location = os.path.join(_location,"./graphics/edit-undo.png")
        global _img13
        _img13 = tk.PhotoImage(file=photo_location)
        self.btnRestore.configure(image=_img13)
        self.btnRestore.configure(compound='none')
        self.btnRestore.configure(style='Toolbutton')
        self.btnRestore_tooltip = \
        ToolTip(self.btnRestore, '''Undo Delete''')

        self.btnUnEdit = ttk.Button(self.TFrame3)
        self.btnUnEdit.place(x=187, y=20, height=42, width=42)
        self.btnUnEdit.configure(command=dbview_support.on_btnCancelEdit)
        self.btnUnEdit.configure(takefocus="")
        self.btnUnEdit.configure(text='''Tbutton''')
        photo_location = os.path.join(_location,"./graphics/accessories-text-editor-No.png")
        global _img14
        _img14 = tk.PhotoImage(file=photo_location)
        self.btnUnEdit.configure(image=_img14)
        self.btnUnEdit.configure(compound='none')
        self.btnUnEdit.configure(style='Toolbutton')
        self.btnUnEdit_tooltip = \
        ToolTip(self.btnUnEdit, '''Exit Edit Mode''')

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

def start_up():
    dbview_support.main()

if __name__ == '__main__':
    dbview_support.main()




