#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Oct 22, 2022 03:49:52 AM CDT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import menudemo_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(menudemo_support.root, tearoff=0)
        Popupmenu1.configure(background=_bgcolor)
        Popupmenu1.configure(foreground=_fgcolor)
        Popupmenu1.configure(activebackground=_ana2color)
        Popupmenu1.configure(activeforeground='black')
        Popupmenu1.configure(font="TkMenuFont")
        Popupmenu1.add_command(command=lambda :menudemo_support.on_pop_Copy(args[0])
                ,label='Copy')
        Popupmenu1.add_command(command=lambda :menudemo_support.on_pop_Cut(args[0])
                ,label='Cut')
        Popupmenu1.add_command(command=lambda :menudemo_support.on_pop_Paste(args[0])
                ,label='Paste')
        Popupmenu1.add_command(command=lambda :menudemo_support.on_pop_Clear(args[0])
                ,label='Clear')
        Popupmenu1.add_command(command=lambda :menudemo_support.on_pop_Quit(args[0])
                ,label='Quit')
        Popupmenu1.add_separator()
        Popupmenu1.add_command(command=lambda :menudemo_support.on_pop_CloseMenu(args[0])
                ,label='Close Menu')
        Popupmenu1.post(event.x_root, event.y_root)

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+399+256")
        top.minsize(1, 1)
        top.maxsize(4225, 1410)
        top.resizable(0,  0)
        top.title("Menu Demo")
        top.configure(highlightcolor="black")

        self.top = top
        self.EntryData = tk.StringVar()
        self.EntryData2 = tk.StringVar()

        self.Entry1 = tk.Entry(self.top)
        self.Entry1.place(x=160, y=160, height=23, width=166)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(textvariable=self.EntryData)
        if (menudemo_support.root.tk.call('tk', 'windowingsystem')=='aqua'):
            self.Entry1.bind('<Control-1>', lambda e: popup1(e, 1))
            self.Entry1.bind('<Button-3>', lambda e: popup1(e, 1))
        else:
            self.Entry1.bind('<Button-3>', lambda e: popup1(e, 1))

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top, activebackground='beige'
                ,activeforeground='black', tearoff=0)
        self.menubar.add_cascade(label='File',menu=self.sub_menu,)
        self.sub_menu.add_command(command=menudemo_support.on_mnu_FileNew
                ,label='New')
        self.sub_menu.add_command(command=menudemo_support.on_mnu_FileOpen
                ,label='Open')
        self.sub_menu.add_command(command=menudemo_support.on_mnu_FileSave
                ,label='Save')
        self.sub_menu.add_command(command=menudemo_support.on_mnu_FileSaveAs
                ,label='Save As')
        self.sub_menu.add_separator()
        self.sub_menu.add_command(command=menudemo_support.on_mnu_FileQuit
                ,label='Quit')
        self.sub_menu1 = tk.Menu(top, activebackground='beige'
                ,activeforeground='black', tearoff=0)
        self.menubar.add_cascade(label='Help',menu=self.sub_menu1,)
        self.sub_menu1.add_command(command=menudemo_support.on_mnu_HelpAbout
                ,label='About')
        self.sub_menu1.add_separator()
        self.sub_menu1.add_command(command=menudemo_support.on_mnu_HelpHelp
                ,label='Help')

        self.Entry2 = tk.Entry(self.top)
        self.Entry2.place(x=160, y=220, height=23, width=166)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(textvariable=self.EntryData2)

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(x=4, y=2, height=48, width=595)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")

        self.btnFileNew = tk.Button(self.Frame1)
        self.btnFileNew.place(x=5, y=3, height=36, width=36)
        self.btnFileNew.configure(activebackground="beige")
        self.btnFileNew.configure(borderwidth="2")
        self.btnFileNew.configure(command=menudemo_support.on_btnFileNew)
        self.btnFileNew.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/document-new.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.btnFileNew.configure(image=_img0)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileNew_tooltip = \
        ToolTip(self.btnFileNew, self.tooltip_font, '''File New''')

        self.btnFileOpen = tk.Button(self.Frame1)
        self.btnFileOpen.place(x=40, y=3, height=36, width=36)
        self.btnFileOpen.configure(activebackground="beige")
        self.btnFileOpen.configure(borderwidth="2")
        self.btnFileOpen.configure(command=menudemo_support.on_btnFileOpen)
        self.btnFileOpen.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/document-open.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.btnFileOpen.configure(image=_img1)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileOpen_tooltip = \
        ToolTip(self.btnFileOpen, self.tooltip_font, '''File Open''')

        self.btnFileSave = tk.Button(self.Frame1)
        self.btnFileSave.place(x=75, y=3, height=36, width=36)
        self.btnFileSave.configure(activebackground="beige")
        self.btnFileSave.configure(borderwidth="2")
        self.btnFileSave.configure(command=menudemo_support.on_btnFileSave)
        self.btnFileSave.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/document-save.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.btnFileSave.configure(image=_img2)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileSave_tooltip = \
        ToolTip(self.btnFileSave, self.tooltip_font, '''File Save''')

        self.btnFileSaveAs = tk.Button(self.Frame1)
        self.btnFileSaveAs.place(x=110, y=3, height=36, width=36)
        self.btnFileSaveAs.configure(activebackground="beige")
        self.btnFileSaveAs.configure(borderwidth="2")
        self.btnFileSaveAs.configure(command=menudemo_support.on_btn_FileSaveAs)
        self.btnFileSaveAs.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/document-save-as.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.btnFileSaveAs.configure(image=_img3)
        self.tooltip_font = "TkDefaultFont"
        self.btnFileSaveAs_tooltip = \
        ToolTip(self.btnFileSaveAs, self.tooltip_font, '''File Save As''')

        self.btnAppExit = tk.Button(self.Frame1)
        self.btnAppExit.place(x=552, y=3, height=36, width=36)
        self.btnAppExit.configure(activebackground="beige")
        self.btnAppExit.configure(borderwidth="2")
        self.btnAppExit.configure(command=menudemo_support.on_btnExit)
        self.btnAppExit.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/system-log-out.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.btnAppExit.configure(image=_img4)
        self.tooltip_font = "TkDefaultFont"
        self.btnAppExit_tooltip = \
        ToolTip(self.btnAppExit, self.tooltip_font, '''Exit App''')

        self.btnHelp = tk.Button(self.Frame1)
        self.btnHelp.place(x=445, y=3, height=36, width=36)
        self.btnHelp.configure(activebackground="beige")
        self.btnHelp.configure(borderwidth="2")
        self.btnHelp.configure(command=menudemo_support.on_btnHelp)
        self.btnHelp.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/help-contents32.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.btnHelp.configure(image=_img5)
        self.tooltip_font = "TkDefaultFont"
        self.btnHelp_tooltip = \
        ToolTip(self.btnHelp, self.tooltip_font, '''Help''')

        self.btnAbout = tk.Button(self.Frame1)
        self.btnAbout.place(x=410, y=3, height=36, width=36)
        self.btnAbout.configure(activebackground="beige")
        self.btnAbout.configure(borderwidth="2")
        self.btnAbout.configure(command=menudemo_support.on_btnInfo)
        self.btnAbout.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/information.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.btnAbout.configure(image=_img6)
        self.tooltip_font = "TkDefaultFont"
        self.btnAbout_tooltip = \
        ToolTip(self.btnAbout, self.tooltip_font, '''About''')

        self.btnCopy = tk.Button(self.Frame1)
        self.btnCopy.place(x=179, y=3, height=36, width=36)
        self.btnCopy.configure(activebackground="beige")
        self.btnCopy.configure(borderwidth="2")
        self.btnCopy.configure(command=menudemo_support.on_btn_Copy)
        self.btnCopy.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/edit-copy.png")
        global _img7
        _img7 = tk.PhotoImage(file=photo_location)
        self.btnCopy.configure(image=_img7)
        self.tooltip_font = "TkDefaultFont"
        self.btnCopy_tooltip = \
        ToolTip(self.btnCopy, self.tooltip_font, '''Copy''')

        self.btnClear = tk.Button(self.Frame1)
        self.btnClear.place(x=215, y=3, height=36, width=36)
        self.btnClear.configure(activebackground="beige")
        self.btnClear.configure(borderwidth="2")
        self.btnClear.configure(command=menudemo_support.on_btnClear)
        self.btnClear.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/edit-clear.png")
        global _img8
        _img8 = tk.PhotoImage(file=photo_location)
        self.btnClear.configure(image=_img8)
        self.tooltip_font = "TkDefaultFont"
        self.btnClear_tooltip = \
        ToolTip(self.btnClear, self.tooltip_font, '''Clear''')

        self.btnPaste = tk.Button(self.Frame1)
        self.btnPaste.place(x=250, y=3, height=36, width=36)
        self.btnPaste.configure(activebackground="beige")
        self.btnPaste.configure(borderwidth="2")
        self.btnPaste.configure(command=menudemo_support.on_btnPaste)
        self.btnPaste.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/edit-paste.png")
        global _img9
        _img9 = tk.PhotoImage(file=photo_location)
        self.btnPaste.configure(image=_img9)
        self.tooltip_font = "TkDefaultFont"
        self.btnPaste_tooltip = \
        ToolTip(self.btnPaste, self.tooltip_font, '''Paste''')

        self.btnCut = tk.Button(self.Frame1)
        self.btnCut.place(x=285, y=3, height=36, width=36)
        self.btnCut.configure(activebackground="beige")
        self.btnCut.configure(borderwidth="2")
        self.btnCut.configure(command=menudemo_support.on_btnCut)
        self.btnCut.configure(compound='left')
        photo_location = os.path.join(_location,"./Assets/edit-cut.png")
        global _img10
        _img10 = tk.PhotoImage(file=photo_location)
        self.btnCut.configure(image=_img10)
        self.tooltip_font = "TkDefaultFont"
        self.btnCut_tooltip = \
        ToolTip(self.btnCut, self.tooltip_font, '''Cut''')

# Support code for Balloon Help (also called tooltips).
# derived from http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
#                   End of Class ToolTip

def start_up():
    menudemo_support.main()

if __name__ == '__main__':
    menudemo_support.main()




