#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Oct 14, 2022 09:32:09 AM CDT  platform: Linux
#    Oct 14, 2022 09:35:35 AM CDT  platform: Linux
#    Oct 18, 2022 02:08:55 AM CDT  platform: Linux
#    Oct 18, 2022 02:46:53 AM CDT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import messagebox
from tkinter import filedialog
from tkinter import simpledialog

import menudemo

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = menudemo.Toplevel1(_top1)
    setup()
    root.mainloop()

def setup():
    # binding for Entry2 widget
    _w1.Entry2.bind('<Button-3>', lambda e: menudemo.popup1(e, 2))

def on_btnExit(*args):
    print('menudemo_support.on_btnExit')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    sys.exit()

def on_mnu_FileNew(*args):
    print('menudemo_support.on_mnu_FileNew')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "File New"
    msg = "You asked to create a new empty file."
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_mnu_FileOpen(*args):
    print('menudemo_support.on_mnu_FileOpen')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "File Open"
    msg = "You asked Open an existing file."
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_mnu_FileQuit(*args):
    print('menudemo_support.on_mnu_FileQuit')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    sys.exit()

def on_mnu_FileSave(*args):
    print('menudemo_support.on_mnu_FileSave')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "File Save"
    msg = "You asked to Save a file"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_mnu_FileSaveAs(*args):
    print('menudemo_support.on_mnu_FileSaveAs')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "File Save As"
    msg = "You asked to save a file with a new name."
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_mnu_HelpAbout(*args):
    print('menudemo_support.on_mnu_HelpAbout')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Menu Help"
    msg = "You asked for Application Information from Help|About"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_mnu_HelpHelp(*args):
    print('menudemo_support.on_mnu_HelpHelp')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Menu Help"
    msg = "You asked for Help from Help|About"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_pop_Clear(*args):
    print('menudemo_support.on_pop_Clear')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    # Clear the data in the Entry widget
    which = args[0]
    if which == 1:
        _w1.EntryData.set('')
    else:
        _w1.EntryData2.set('')
    #

def on_pop_CloseMenu(*args):
    print('menudemo_support.on_pop_CloseMenu')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    # We don't have to do anything in this callback.  Just calling the callback
    # will close the popup menu

def on_pop_Copy(*args):
    print('menudemo_support.on_pop_Copy')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    # Get the data from the Entry widget and place it on the clipboard
    which = args[0]
    if which == 1:
        data = _w1.EntryData.get()
    else:
        data = _w1.EntryData2.get()
    root.clipboard_clear()
    root.clipboard_append(data)

def on_pop_Cut(*args):
    print('menudemo_support.on_pop_Cut')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    which = args[0]
    if which == 1:
        data = _w1.EntryData.get()
    else:
        data = _w1.EntryData2.get()
    root.clipboard_clear()
    root.clipboard_append(data)
    if which == 1:
        _w1.EntryData.set('')
    else:
        _w1.EntryData2.set('')

def on_pop_Paste(*args):
    print('menudemo_support.on_pop_Paste')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    # Get data from Entry widget and paste it to the clipboard
    which = args[0]
    cbdata = root.clipboard_get()
    if which == 1:
        _w1.EntryData.set(cbdata)
    else:
        _w1.EntryData2.set(cbdata)

def on_pop_Quit(*args):
    print('menudemo_support.on_pop_Quit')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    sys.exit()

# def on_Entry1Btn3(*args):
#     print('menudemo_support.on_Entry1Btn3')
#     for arg in args:
#         print('    another arg:', arg)
#     sys.stdout.flush()

# Menu button bar section

def on_btnClear(*args):
    print('menudemo_support.on_btnClear')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the Clear Button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_btnCut(*args):
    print('menudemo_support.on_btnCut')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the Cut button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_btnFileNew(*args):
    print('menudemo_support.on_btnFileNew')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the New button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_btnFileOpen(*args):
    print('menudemo_support.on_btnFileOpen')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the Open button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_btnFileSave(*args):
    print('menudemo_support.on_btnFileSave')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the Save button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_btnHelp(*args):
    print('menudemo_support.on_btnHelp')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the Help button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_btnInfo(*args):
    print('menudemo_support.on_btnInfo')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the Info (About) button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_btnPaste(*args):
    print('menudemo_support.on_btnPaste')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the Paste button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_btn_Copy(*args):
    print('menudemo_support.on_btn_Copy')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the Copy button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def on_btn_FileSaveAs(*args):
    print('menudemo_support.on_btn_FileSaveAs')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()
    titl = "Button Menu"
    msg = "You clicked the File Save As button"
    messagebox.showinfo(titl, msg, icon=messagebox.INFO, parent=_top1)

def pop_CloseMenu(*args):
    print('menudemo_support.pop_CloseMenu')
    for arg in args:
        print('    another arg:', arg)
    sys.stdout.flush()

if __name__ == '__main__':
    menudemo.start_up()




